basePath: /api/v1/provisioner
consumes:
- application/json
definitions:
  CreateChefPayload:
    example:
      nodeAttributes: 7.3604893e+18
      runlist:
      - Totam voluptatem voluptas aspernatur distinctio dolores recusandae.
      vmuid: Ipsum qui nihil vel laboriosam odit.
    properties:
      nodeAttributes:
        description: '{docker: {name: dockername}}'
        example: 7.3604893e+18
        type: any
      runlist:
        example:
        - Totam voluptatem voluptas aspernatur distinctio dolores recusandae.
        items:
          example: Totam voluptatem voluptas aspernatur distinctio dolores recusandae.
          type: string
        type: array
      vmuid:
        description: kdielsie
        example: Ipsum qui nihil vel laboriosam odit.
        type: string
    required:
    - vmuid
    - runlist
    title: CreateChefPayload
    type: object
host: localhost:3000
info:
  description: A provisioner for VM
  title: Provisioner API
  version: ""
paths:
  /chef:
    post:
      operationId: chef#create
      parameters:
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/CreateChefPayload'
      responses:
        "200":
          description: OK
      schemes:
      - http
      summary: create chef
      tags:
      - chef
  /chef/{vmuid}:
    get:
      description: Retrieve the status by VM ID
      operationId: chef#show
      parameters:
      - description: VM ID
        in: query
        name: VMUID
        required: false
        type: string
      - in: path
        name: vmuid
        required: true
        type: string
      responses:
        "200":
          description: OK
        "404":
          description: Not Found
      schemes:
      - http
      summary: show chef
      tags:
      - chef
produces:
- application/json
responses:
  NotFound:
    description: Not Found
  OK:
    description: OK
schemes:
- http
swagger: "2.0"
